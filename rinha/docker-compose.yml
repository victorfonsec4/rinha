version: "3.5"

services:
  api01: &api
    # Lembre-se de que seu serviço HTTP deve estar hospedado num repositório
    # publicamente acessível! Ex.: hub.docker.com
    image: vifonsec/rinha:latest
    entrypoint: ["./start_main.sh"]
    hostname: api01
    volumes:
      - /tmp:/tmp
      - /var/run/postgresql:/var/run/postgresql
    depends_on:
      - db
    deploy:
      resources:
        limits:
          cpus: "0.6"
          memory: "200MB"
    network_mode: "host"

  api02:
    # Essa sintaxe reusa o que foi declarado em 'api01'.
    <<: *api
    hostname: api02
    command: ["--socket_path=/tmp/unix_socket_example2.sock"]

  nginx:
    image: vifonsec/nginx2:latest
    volumes:
      - ./nginx2.conf:/etc/nginx/nginx.conf:ro
      - /tmp:/tmp
    depends_on:
      - api01
      - api02
    ports:
        # Obrigatório expor/usar a porta 9999 no load balancer!
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: "0.6"
          memory: "200MB"
    network_mode: "host"

  db:
    image: vifonsec/postgres:latest
    volumes:
      - /tmp:/tmp
      - /var/run/postgresql:/var/run/postgresql
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "150MB"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

    network_mode: "host"



# O uso do modo `bridge` deve ser adequado à carga que será usada no teste.
# A edição anterior se beneficiou do modo host pois o volume de requisições
# era relativamente alto e a virtualização da rede se tornou um gargalo, mas
# este modo é mais complexo de ser configurado. Fique à vontade para usar o
# modo que quiser desde que não conflite com portas trivialmente usadas em um
# SO.
# networks:
#   default:
#     driver: bridge
#     name: rinha-nginx-2024q1
